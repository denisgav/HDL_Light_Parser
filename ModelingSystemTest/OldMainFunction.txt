using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using VHDL;
using VHDL.parser;
using Antlr.Runtime;
using VHDL.libraryunit;
using System.Diagnostics;
using VHDLModelingSystem;

namespace ModelingSystemTest
{
    class Program
    {
        [STAThread]
        static void Main(string[] args)
        {
            try
            {
                VHDL_Library_Manager libraryManager = new VHDL_Library_Manager("", @"C:\Users\Denis\Documents\HDL_Light\LibraryRepository.xml");
                libraryManager.Logger.OnWriteEvent += new VHDLParser.Logger.OnWriteDeleagte(Logger_OnWriteEvent);
                libraryManager.LoadData(@"e:\Laptop Projects\HDL_Light\HDL_Light\bin\Debug\Libraries");
                VhdlParserSettings settings = VhdlParser.DEFAULT_SETTINGS;
                RootDeclarativeRegion rootScope = new RootDeclarativeRegion();
                LibraryDeclarativeRegion currentLibrary = new LibraryDeclarativeRegion("work");
                rootScope.getLibraries().Add(currentLibrary);
                //rootScope.getLibraries().Add(VHDL_Library_Manager.GetLibrary("STD"));

                Console.WriteLine("Parsing code.vhd");
                VhdlFile file = VhdlParser.parseFile("code.vhd", settings, rootScope, currentLibrary, libraryManager);
                Console.WriteLine("Parsing complete");
                
                foreach (LibraryUnit unit in file.getElements())
                {
                    if (unit is Architecture)
                    {
                        Architecture arch = unit as Architecture;
                        if (arch.getIdentifier().Equals("some_test_bench"))
                        {
                            ModelingSystemCore model = new ModelingSystemCore(arch, currentLibrary, rootScope);
                            model.Start();
                            model.SaveToVCD("code[VCD].vcd");

                            Process proc = new Process();
                            proc.StartInfo.Arguments = "code[VCD].vcd";
                            proc.StartInfo.FileName = "notepad.exe";
                            proc.StartInfo.WorkingDirectory = Process.GetCurrentProcess().StartInfo.WorkingDirectory;
                            proc.Start();
                        }
                    }
                }
            }
            catch (SyntaxExceptionScope ex)
            {
                Console.WriteLine(ex.Message);
                foreach (RecognitionException err in ex.Errors)
                {
                    Console.WriteLine(VhdlParser.errorToMessage(err));
                }
            }
            catch (SemanticExceptionScope ex)
            {
                Console.WriteLine(ex.Message);
                foreach (ParseError err in ex.Errors)
                {
                    Console.WriteLine(VhdlParser.errorToMessage(err));
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                Console.WriteLine(ex.Source);
                Console.WriteLine(ex.StackTrace);
            }

            Console.ReadKey();
        }

        static void Logger_OnWriteEvent(VHDLParser.LoggerMessageVerbosity verbosity, string message)
        {
            Console.WriteLine(String.Format("[{0}] {1}", verbosity, message));
        }
    }
}
